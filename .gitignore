# Created by https://www.toptal.com/developers/gitignore/api/python,django,pycharm+all
# Edit at https://www.toptal.com/developers/gitignore?templates=python,django,pycharm+all

### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / optimized / DLL files
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo

# Django stuff:

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

### PyCharm+all ###
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

### PyCharm+all Patch ###
# Ignore everything but code style settings and run configurations
# that are supposed to be shared within teams.

.idea/*

!.idea/codeStyles
!.idea/runConfigurations

### Python ###
# Byte-compiled / optimized / DLL files

# C extensions

# Distribution / packaging

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.

# Installer logs

# Unit test / coverage reports

# Translations

# Django stuff:

# Flask stuff:

# Scrapy stuff:

# Sphinx documentation

# PyBuilder

# Jupyter Notebook

# IPython

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm

# Celery stuff

# SageMath parsed files

# Environments

# Spyder project settings

# Rope project settings

# mkdocs documentation

# mypy

# Pyre type checker

# pytype static type analyzer

# Cython debug symbols

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP config files
pyrightconfig.json

# End of https://www.toptal.com/developers/gitignore/api/python,django,pycharm+all
# Створено https://www.toptal.com/developers/gitignore/api/python,django,pycharm+all # Редагувати на https://www.toptal.com/developers/gitignore?templates=python,django,pycharm+all ### Джанго ### *.log *.горщик *.pyc __pycache__/ local_settings.py db.sqlite3 db.sqlite3-журнал ЗМІ # Якщо ваш процес збирання включає виконання collectstatic, то, ймовірно, вам не потрібно або не потрібно включати staticfiles/ # у вашому сховищі Git. Оновіть і розкоментуйте наступний рядок відповідно. # <django-project-name>/staticfiles/ ### Стек Django.Python ### # Зібрані по байтам / оптимізовані / файли DLL *.py[код] *$py.class # розширення C *.так # Розповсюдження / упаковка .Python будувати/ розвивати яйця/ dist/ завантаження/ яйця/ .яйця/ lib/ lib64/ частини/ sdist/ змінна/ колеса/ share/python-wheels/ *.egg-info/ .installed.cfg *.яйце МАНІФЕСТ # PyInstaller # Зазвичай ці файли записуються за допомогою сценарію python із шаблону # перед тим, як PyInstaller створить exe, щоб додати в нього дату/іншу інформацію. *.маніфест *.spec # Журнали інсталятора pip-log.txt pip-delete-this-directory.txt # Звіти про модульне тестування / покриття htmlcov/ .tox/ .nox/ .покриття .покриття.* .cache nosetests.xml coverage.xml *.обкладинка *.py, обкладинка .hypothesis/ .pytest_cache/ обкладинка/ # Переклади *.mo # Речі Django: # Речі з колби: примірник/ .webassets-cache # Scrapy речі: .скреб # Документація Sphinx docs/_build/ # PyBuilder .pybuilder/ мета/ # Блокнот Юпітер .ipynb_checkpoints # IPython profile_default/ ipython_config.py # pyenv # Для бібліотеки чи пакета ви можете проігнорувати ці файли, оскільки код є # призначений для роботи в кількох середовищах; інакше перевірте їх у: # .python-версія # pipenv # Відповідно до pypa/pipenv#598, рекомендовано включити Pipfile.lock в контроль версій. # Однак у випадку співпраці, якщо є залежності чи залежності, що стосуються певної платформи # не маючи міжплатформної підтримки, pipenv може встановлювати залежності, які не працюють або ні # встановити всі необхідні залежності. #Pipfile.lock #поезія # Подібно до Pipfile.lock, зазвичай рекомендується включати poetry.lock в контроль версій. # Це особливо рекомендовано для бінарних пакетів, щоб забезпечити відтворюваність, і багато іншого # зазвичай ігнорується для бібліотек. # https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control #поезія.замок # pdm # Подібно до Pipfile.lock, зазвичай рекомендується включати pdm.lock в контроль версій. #pdm.lock # pdm зберігає конфігурації для всього проекту в .pdm.toml, але рекомендується не включати його # в контролі версій. # https://pdm.fming.dev/#use-with-ide .pdm.toml # PEP 582; використовується напр. github.com/David-OConnor/pyflow і github.com/pdm-project/pdm __pypackages__/ # Селера celerybeat-розклад celerybeat.pid # Проаналізовані файли SageMath *.sage.py # Середовища .env .venv env/ venv/ ENV/ env.bak/ venv.bak/ # Налаштування проекту Spyder .spyderproject .spyproject # Налаштування проекту Rope .ropeproject # документація mkdocs /сайт # mypy .mypy_cache/ .dmypy.json dmypy.json # Перевірка типу багаття .pyre/ # аналізатор статичного типу pytype .pytype/ # Символи налагодження Cython cython_debug/ # PyCharm # Спеціальний шаблон JetBrains зберігається в окремому JetBrains.gitignore, який може # можна знайти за адресою https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore # і може бути доданий до глобального gitignore або об’єднаний у цей файл. Для більш ядерного # варіант (не рекомендовано) ви можете розкоментувати наступне, щоб ігнорувати всю папку ідей. #.idea/ ### PyCharm+все ### # Охоплює IDE JetBrains: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm і Rider # Посилання: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839 # Специфічні для користувача речі .idea/**/workspace.xml .idea/**/tasks.xml .idea/**/usage.statistics.xml .idea/**/словники .idea/**/полиця # AWS для користувача .idea/**/aws.xml # Згенеровані файли .idea/**/contentModel.xml # Чутливі або інтенсивні файли .idea/**/dataSources/ .idea/**/dataSources.ids .idea/**/dataSources.local.xml .idea/**/sqlDataSources.xml .idea/**/dynamic.xml .idea/**/uiDesigner.xml .idea/**/dbnavigator.xml # Gradle .idea/**/gradle.xml .idea/**/libraries # Gradle і Maven з автоімпортом # Якщо ви використовуєте Gradle або Maven з автоматичним імпортом, вам слід виключити файли модулів, # оскільки вони будуть створені заново та можуть призвести до відтоку. Розкоментуйте, якщо використовуєте # автоімпорт. # .idea/artefacts # .idea/compiler.xml # .idea/jarRepositories.xml # .idea/modules.xml # .idea/*.iml # .idea/modules # *.iml # *.ipr # CMake cmake-build-*/ # Плагін Mongo Explorer .idea/**/mongoSettings.xml # Файловий формат проекту *.iws # IntelliJ поза/ # плагін mpeltonen/sbt-idea .idea_modules/ # Плагін JIRA atlassian-ide-plugin.xml # Плагін Cursive Clojure .idea/replstate.xml # Плагін SonarLint .idea/sonarlint/ # Плагін Crashlytics (для Android Studio та IntelliJ) com_crashlytics_export_strings.xml crashlytics.properties crashlytics-build.properties тканина.властивості # Клієнт Rest на основі редактора .idea/httpRequests # Серіалізований кеш-файл Android Studio 3.1+ .idea/caches/build_file_checksums.ser ### PyCharm+усі патчі ### # Ігноруйте все, крім налаштувань стилю коду та запуску конфігурацій #, якими мають ділитися команди. .idea/* !.idea/codeStyles !.idea/runConfigurations ### Python ### # Зібрані по байтам / оптимізовані / файли DLL # розширення C # Розповсюдження / упаковка # PyInstaller # Зазвичай ці файли записуються за допомогою сценарію python із шаблону # перед тим, як PyInstaller створить exe, щоб додати в нього дату/іншу інформацію. # Журнали інсталятора # Звіти про модульне тестування / покриття # Переклади # Речі Django: # Речі з колби: # Scrapy речі: # Документація Sphinx # PyBuilder # Блокнот Юпітер # IPython # pyenv # Для бібліотеки чи пакета ви можете ігнорувати ці файли, оскільки код є # призначений для роботи в кількох середовищах; інакше перевірте їх у: # .python-версія # pipenv # Відповідно до pypa/pipenv#598, рекомендовано включити Pipfile.lock в контроль версій. # Однак у випадку співпраці, якщо є залежності чи залежності, що стосуються певної платформи # не маючи міжплатформної підтримки, pipenv може встановлювати залежності, які не працюють або ні # встановити всі необхідні залежності. #поезія # Подібно до Pipfile.lock, зазвичай рекомендується включати poetry.lock в контроль версій. # Це особливо рекомендовано для бінарних пакетів, щоб забезпечити відтворюваність, і багато іншого # зазвичай ігнорується для бібліотек. # https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control # pdm # Подібно до Pipfile.lock, зазвичай рекомендується включати pdm.lock в контроль версій. # pdm зберігає конфігурації для всього проекту в .pdm.toml, але рекомендується не включати його # в контролі версій. # https://pdm.fming.dev/#use-with-ide # PEP 582; використовується напр. github.com/David-OConnor/pyflow і github.com/pdm-project/pdm # Селера # Проаналізовані файли SageMath # Середовища # Налаштування проекту Spyder # Налаштування проекту Rope # документація mkdocs # mypy # Перевірка типу багаття # аналізатор статичного типу pytype # Символи налагодження Cython # PyCharm # Спеціальний шаблон JetBrains зберігається в окремому JetBrains.gitignore, який може # можна знайти за адресою https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore # і може бути доданий до глобального gitignore або об’єднаний у цей файл. Для більш ядерного # варіант (не рекомендовано) ви можете розкоментувати наступне, щоб ігнорувати всю папку ідей. ### Патч Python ### # Файл локальної конфігурації Poetry - https://python-poetry.org/docs/configuration/#local-configuration поезії.toml # йорж .ruff_cache/ # Файли конфігурації LSP pyrightconfig.json # Кінець https://www.toptal.com/developers/gitignore/api/python,django,pycharm+all
